/**
 * useAuth Hook
 * Admin authentication and session management
 */

'use client';

import { useState, useEffect, useCallback, createContext, useContext } from 'react';
import { useRouter } from 'next/navigation';
import {
  signInAdmin,
  signOutAdmin,
  getCurrentAdmin,
  getSupabaseClient,
} from '@/lib/supabase';
import type { AdminUser, AdminRole } from '@/types/content';
import type { User } from '@supabase/supabase-js';

// Auth context type
interface AuthContextType {
  user: User | null;
  adminUser: AdminUser | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;
  signOut: () => Promise<void>;
  hasRole: (role: AdminRole | AdminRole[]) => boolean;
  isAuthenticated: boolean;
}

// Create context
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Auth provider props
interface AuthProviderProps {
  children: React.ReactNode;
}

/**
 * Auth Provider Component
 * Wrap your app with this to provide auth context
 */
export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [adminUser, setAdminUser] = useState<AdminUser | null>(null);
  const [loading, setLoading] = useState(true);
  const supabase = getSupabaseClient();

  // Load current user on mount
  useEffect(() => {
    const loadUser = async () => {
      try {
        const currentUser = await getCurrentAdmin();
        setUser(currentUser);

        if (currentUser) {
          // Fetch admin user details
          const { data } = await supabase
            .from('admin_users')
            .select('*')
            .eq('email', currentUser.email)
            .eq('is_active', true)
            .single();

          setAdminUser(data as AdminUser | null);
        }
      } catch (error) {
        console.error('Failed to load user:', error);
      } finally {
        setLoading(false);
      }
    };

    loadUser();

    // Subscribe to auth changes
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange(async (event, session) => {
      if (event === 'SIGNED_IN' && session?.user) {
        setUser(session.user);

        // Fetch admin user details
        const { data } = await supabase
          .from('admin_users')
          .select('*')
          .eq('email', session.user.email)
          .eq('is_active', true)
          .single();

        setAdminUser(data as AdminUser | null);
      } else if (event === 'SIGNED_OUT') {
        setUser(null);
        setAdminUser(null);
      }
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [supabase]);

  // Sign in
  const signIn = useCallback(async (email: string, password: string) => {
    setLoading(true);

    try {
      const result = await signInAdmin(email, password);

      if (result.error) {
        return { success: false, error: result.error };
      }

      if (result.user) {
        setAdminUser(result.user as AdminUser);
      }

      return { success: true };
    } catch (error) {
      const message = error instanceof Error ? error.message : 'Sign in failed';
      return { success: false, error: message };
    } finally {
      setLoading(false);
    }
  }, []);

  // Sign out
  const signOut = useCallback(async () => {
    setLoading(true);

    try {
      await signOutAdmin();
      setUser(null);
      setAdminUser(null);
    } catch (error) {
      console.error('Sign out failed:', error);
    } finally {
      setLoading(false);
    }
  }, []);

  // Check if user has specific role(s)
  const hasRole = useCallback(
    (role: AdminRole | AdminRole[]) => {
      if (!adminUser) return false;

      const roles = Array.isArray(role) ? role : [role];
      return roles.includes(adminUser.role);
    },
    [adminUser]
  );

  const value: AuthContextType = {
    user,
    adminUser,
    loading,
    signIn,
    signOut,
    hasRole,
    isAuthenticated: !!user && !!adminUser,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

/**
 * useAuth Hook
 * Access auth context
 */
export function useAuth() {
  const context = useContext(AuthContext);

  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }

  return context;
}

/**
 * useRequireAuth Hook
 * Redirect to login if not authenticated
 */
export function useRequireAuth(redirectTo: string = '/maliang-admin') {
  const { isAuthenticated, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !isAuthenticated) {
      router.push(redirectTo);
    }
  }, [isAuthenticated, loading, router, redirectTo]);

  return { isAuthenticated, loading };
}

/**
 * useRequireRole Hook
 * Redirect if user doesn't have required role
 */
export function useRequireRole(
  requiredRole: AdminRole | AdminRole[],
  redirectTo: string = '/maliang-admin'
) {
  const { hasRole, loading, isAuthenticated } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!loading && isAuthenticated && !hasRole(requiredRole)) {
      router.push(redirectTo);
    }
  }, [hasRole, requiredRole, loading, isAuthenticated, router, redirectTo]);

  return { hasRole: hasRole(requiredRole), loading };
}

/**
 * useAdminPermissions Hook
 * Check admin permissions for various actions
 */
export function useAdminPermissions() {
  const { adminUser, hasRole } = useAuth();

  const canCreate = useCallback(() => {
    return hasRole(['super_admin', 'admin', 'editor']);
  }, [hasRole]);

  const canEdit = useCallback(() => {
    return hasRole(['super_admin', 'admin', 'editor']);
  }, [hasRole]);

  const canDelete = useCallback(() => {
    return hasRole(['super_admin', 'admin']);
  }, [hasRole]);

  const canPublish = useCallback(() => {
    return hasRole(['super_admin', 'admin', 'editor']);
  }, [hasRole]);

  const canManageUsers = useCallback(() => {
    return hasRole(['super_admin']);
  }, [hasRole]);

  const canTranslate = useCallback(() => {
    return hasRole(['super_admin', 'admin', 'editor', 'translator']);
  }, [hasRole]);

  const canReviewTranslations = useCallback(() => {
    return hasRole(['super_admin', 'admin', 'editor']);
  }, [hasRole]);

  const canManageSEO = useCallback(() => {
    return hasRole(['super_admin', 'admin', 'editor']);
  }, [hasRole]);

  return {
    adminUser,
    canCreate,
    canEdit,
    canDelete,
    canPublish,
    canManageUsers,
    canTranslate,
    canReviewTranslations,
    canManageSEO,
  };
}

/**
 * useSession Hook
 * Access current session information
 */
export function useSession() {
  const { user, adminUser, isAuthenticated } = useAuth();
  const [session, setSession] = useState<any>(null);
  const supabase = getSupabaseClient();

  useEffect(() => {
    const getSession = async () => {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      setSession(session);
    };

    getSession();
  }, [supabase, user]);

  return {
    session,
    user,
    adminUser,
    isAuthenticated,
  };
}

/**
 * usePasswordReset Hook
 * Handle password reset functionality
 */
export function usePasswordReset() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const supabase = getSupabaseClient();

  const requestReset = useCallback(
    async (email: string) => {
      setLoading(true);
      setError(null);
      setSuccess(false);

      try {
        const { error: resetError } = await supabase.auth.resetPasswordForEmail(email, {
          redirectTo: `${window.location.origin}/maliang-admin/reset-password`,
        });

        if (resetError) throw resetError;

        setSuccess(true);
        return { success: true };
      } catch (err) {
        const message = err instanceof Error ? err.message : 'Password reset failed';
        setError(message);
        return { success: false, error: message };
      } finally {
        setLoading(false);
      }
    },
    [supabase]
  );

  const updatePassword = useCallback(
    async (newPassword: string) => {
      setLoading(true);
      setError(null);
      setSuccess(false);

      try {
        const { error: updateError } = await supabase.auth.updateUser({
          password: newPassword,
        });

        if (updateError) throw updateError;

        setSuccess(true);
        return { success: true };
      } catch (err) {
        const message = err instanceof Error ? err.message : 'Password update failed';
        setError(message);
        return { success: false, error: message };
      } finally {
        setLoading(false);
      }
    },
    [supabase]
  );

  return {
    loading,
    error,
    success,
    requestReset,
    updatePassword,
  };
}
